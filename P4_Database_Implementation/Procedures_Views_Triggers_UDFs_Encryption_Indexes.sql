use house_rental_database_system;
GO
--********************************************************************************************************--

--Stored Procedure1: takes a broker firm ID as input and returns the brokerage rates and company ID as output.
CREATE OR ALTER PROCEDURE Getbrokerfirmdetails
	@FirmId         INT,
	@BrokerageRates DECIMAL(10, 2) output,
	@CompanyId      INT output
AS
  BEGIN
      SELECT @BrokerageRates = brokerage_rates,
             @CompanyId = company_id
      FROM   broker_firm
      WHERE  firm_id = @FirmId
  END 

GO

--Query to execute Stored Procedure1
DECLARE @BrokRates DECIMAL(10, 2)
DECLARE @CompId INT

EXEC Getbrokerfirmdetails
  @FirmId=7,
  @BrokerageRates=@BrokRates output,
  @CompanyId=@CompId output

SELECT @BrokRates AS 'Brokerage rates',
       @CompId    AS 'Company ID' 

GO
--********************************************************************************************************--

--Stored Procedure2: takes a Property ID as input and returns all the details as output.
CREATE OR ALTER PROCEDURE PropertydetailsById 
	@property_id    INT,
	@property_type  VARCHAR(50) output,
	@property_owner VARCHAR(100) output,
	@city           VARCHAR(50) output,
	@state          VARCHAR(50) output,
	@zip            VARCHAR(10) output
AS
  BEGIN
      SELECT @property_type = property_type,
             @property_owner = property_owner,
             @city = city,
             @state = state,
             @zip = zip
      FROM   property_details
      WHERE  property_id = @property_id;
  END 
GO

--Query to execute Stored Procedure2
DECLARE @type VARCHAR(50)
DECLARE @owner VARCHAR(100)
DECLARE @city VARCHAR(50)
DECLARE @state VARCHAR(50)
DECLARE @zip VARCHAR(10)

EXEC PropertydetailsById
  @property_id = 5,
  @property_type = @type output,
  @property_owner = @owner output,
  @city = @city output,
  @state = @state output,
  @zip = @zip output

SELECT @type  AS 'Property Type',
       @owner AS 'Property Owner',
       @city AS 'City',
	   @state AS 'State', 
	   @zip AS 'Zip' 

GO
--********************************************************************************************************--

--Stored Procedure3: takes a Property ID as input and update the details and output message.
CREATE OR ALTER PROCEDURE PropertyDetailsUpdate
	@PropertyId INT,
	@NewType    VARCHAR(50),
	@NewOwner   VARCHAR(100),
	@NewCity    VARCHAR(50),
	@NewState   VARCHAR(50),
	@NewZip     VARCHAR(10),
	@Message    VARCHAR(100) output
AS
  BEGIN
      UPDATE property_details
      SET    property_type = @NewType,
             property_owner = @NewOwner,
             city = @NewCity,
             state = @NewState,
             zip = @NewZip
      WHERE  property_id = @PropertyId

      IF @@ROWCOUNT > 0
        SET @Message = 'Property details updated successfully'
      ELSE
        SET @Message = 'Property details update failed'
  END 
GO

--Query to execute Stored Procedure3
DECLARE @mess VARCHAR(100)

EXEC PropertyDetailsUpdate
	@PropertyId = 3,
	@NewType = 'Apartment',
	@NewOwner = 'Bob Johnson',
	@NewCity = 'San Diego',
	@NewState = 'California',
	@NewZip = '02120',
	@Message = @mess output

SELECT @mess  AS 'Mesage'

GO
--********************************************************************************************************--

--Stored Procedure4: to update the price of a specific landlord's price related to properties
CREATE OR ALTER PROCEDURE LandlordPriceUpdate 
	@PropertyID INT,
    @NewPrice   DECIMAL(10, 2)
AS
  BEGIN
      UPDATE landlords
      SET    price = @NewPrice
      FROM   landlords l
             INNER JOIN property_details p
                     ON l.landlord_id = p.landlord_id
      WHERE  p.property_id = @PropertyID
  END 
GO

--Example Query to execute Stored Procedure4
EXEC LandlordPriceUpdate @PropertyID = 4,@NewPrice = 2100

GO
--********************************************************************************************************--

--View1: Report to show total number of properties and the total revenue generated by each management company
CREATE VIEW RevenueReport_Mgmt
AS
  SELECT m.company_id,
         Count(p.property_id) AS TotalProperties,
         Sum(m.price)         AS TotalRevenue
  FROM   management_company m
         LEFT JOIN property_details p
                ON m.company_id = p.company_id
  GROUP  BY m.company_id; 
GO

--Query to check RevenueReport_Mgmt view
SELECT company_id, TotalProperties, TotalRevenue FROM RevenueReport_Mgmt;

GO
--********************************************************************************************************--

--View2: Report to show all customers along with their broker firms and associated brokers to it
CREATE VIEW customer_broker_firm
AS
  SELECT c.customer_id,
         c.NAME,
         c.city,
         c.state,
         c.zip,
         bf.firm_id  AS Broker_Firm_ID,
         b.broker_id AS Broker_ID,
         b.NAME      AS Broker_Name
  FROM   customers c
         LEFT JOIN broker_firm bf
                ON c.firm_id = bf.firm_id
         LEFT JOIN brokers b
                ON bf.firm_id = b.firm_id; 
GO

--Query to check customer_broker_firm view
SELECT customer_id, name, city, state, zip, broker_firm_id, broker_id, broker_name FROM customer_broker_firm;

GO
--********************************************************************************************************--

--View3: Report to show the number of customers in each state 
CREATE VIEW customers_by_state
AS
  SELECT city,
         state,
         Count(*) AS Customer_Count
  FROM   customers
  GROUP  BY city,
            state;
GO		
		
--Query to check customers_by_state view
SELECT city, state, Customer_Count FROM customers_by_state;

GO
--********************************************************************************************************--

--View4: Report to show property details along with Owner_Type as landlord, management company and broker firm information
CREATE VIEW Property_Details_View
AS
  SELECT p.property_id,
         p.property_type,
         p.property_owner,
         p.city,
         p.state,
         p.zip,
         CASE
           WHEN p.company_id IS NOT NULL THEN 'MANAGEMENT COMPANY'
           WHEN p.landlord_id IS NOT NULL THEN 'LANDLORD'
           WHEN p.firm_id IS NOT NULL THEN 'BROKER FIRM'
         END AS Owner_Type
  FROM   property_details p; 
GO

--Query to check Property_Details_View view
SELECT property_id, property_type, property_owner, city, state, zip, Owner_Type FROM Property_Details_View;

GO
--********************************************************************************************************--

--Trigger1: To update Property Details 
CREATE TABLE property_details_audit
  (
	 property_Audit_id int not null primary key IDENTITY(1,1),
     property_id    INT NOT NULL,
     property_type  VARCHAR(50),
     property_owner VARCHAR(100),
     city           VARCHAR(50),
     state          VARCHAR(50),
     zip            VARCHAR(10),
     company_id     INT,
     landlord_id    INT,
     firm_id        INT,
	 [Action] char(1),
	 [ActionDate] datetime,
  );
GO
CREATE TRIGGER propertyhistory
ON dbo.property_details
FOR UPDATE
AS
  BEGIN
      INSERT INTO property_details_audit
              (property_id, property_type, property_owner, city, state, zip, company_id, landlord_id, firm_id, [Action], [ActionDate])
      SELECT property_id, property_type, property_owner, city, state, zip, company_id, landlord_id, firm_id,'U' as [Action] ,GETDATE() as ActionDate
      FROM   deleted
  END 

GO

--Example Query to check trigger
Update property_details set city = 'San Diego' where property_id = 2;
GO
SELECT property_id, property_type, property_owner, city, state, zip, company_id, landlord_id, firm_id FROM property_details;
GO
SELECT property_id, property_type, property_owner, city, state, zip, company_id, landlord_id, firm_id, [Action] , ActionDate FROM property_details_audit;

GO
--********************************************************************************************************--

--Trigger2: To update Customer and trigger only if city is updated
CREATE TABLE customers_audit
  (
     custome_audit_id INT NOT NULL PRIMARY KEY IDENTITY(1, 1),
     customer_id      INT NOT NULL,
     old_city         VARCHAR(50),
     new_city         VARCHAR(50),
     [actiondate]     DATETIME
  ); 
GO
CREATE TRIGGER customershistory
ON dbo.customers
FOR UPDATE
AS
  BEGIN
      IF UPDATE(city)
        BEGIN
            INSERT INTO customers_audit
              (customer_id, old_city, new_city, [actiondate])
			SELECT d.customer_id, d.city, i.city, GETDATE() as ActionDate
            FROM   deleted d
                   JOIN inserted i
                     ON d.customer_id = i.customer_id
        END
  END 

GO

--Example Query to check trigger
Update customers set city = 'San Diego' where customer_id = 3;
GO
SELECT customer_id, NAME, city, state, zip, company_id, firm_id FROM   customers;
GO
SELECT custome_audit_id, customer_id, old_city, new_city, [actiondate] FROM   customers_audit;

GO
--********************************************************************************************************--

--User Defined Function1 (UDF1): Calculates age of customers based on their dob
CREATE FUNCTION Calculate_age(@customer_id INT)
returns INT
AS
  BEGIN
      DECLARE @dob DATE

      SELECT @dob = date_of_brith
      FROM   customers
      WHERE  customer_id = @customer_id

      RETURN Datediff(year, @dob, Getdate())
  END 

GO

--Query for computed column- calculate age
ALTER TABLE customers ADD customer_age AS dbo.Calculate_age(customer_id);
GO
SELECT customer_id, name, company_id, firm_id, customer_age from customers;

GO
--********************************************************************************************************--

--User Defined Function2 (UDF2): Calculates commission rates of broker firms based on Brokerage Rates
CREATE FUNCTION Calculate_commission_rate(@firm_id INT)
RETURNS DECIMAL(10,2)
AS
BEGIN
    DECLARE @commission_rate DECIMAL(10,2)
    DECLARE @brokerage_rate DECIMAL(10,2)

    SELECT @brokerage_rate = brokerage_rates
    FROM broker_firm
    WHERE firm_id = @firm_id

    IF @brokerage_rate <= 9.5
        SET @commission_rate = 0.05
    ELSE
        SET @commission_rate = 0.1

    RETURN @commission_rate
END

GO

--Query for computed column- calculate commission rates
ALTER TABLE broker_firm ADD commission_rates AS dbo.Calculate_commission_rate(firm_id);
GO
SELECT firm_id, brokerage_rates, commission_rates from broker_firm;

GO

--********************************************************************************************************--

--Encryption: Column Data Encryption for password
ALTER TABLE app_user ADD [encrypted_password] VARBINARY(400) 
go

CREATE master KEY encryption BY password = 'mysecretpass';
go

CREATE certificate appuserpass WITH subject = 'App User Password';
go

CREATE symmetric KEY appuserpass_sm WITH algorithm = aes_256 encryption BY certificate appuserpass;
go

OPEN symmetric KEY appuserpass_sm decryption BY certificate appuserpass;
go 

DECLARE @user_id INT = 1
DECLARE @max_user_id INT = 50

WHILE ( @user_id <= @max_user_id )
  BEGIN
      UPDATE app_user
      SET    encrypted_password = Encryptbykey(Key_guid('AppUserPass_SM'), CONVERT(VARBINARY, [password]))
      WHERE  user_id = @user_id

      SET @user_id = @user_id + 1
  END
GO

SELECT user_id, user_name, user_type, [encrypted_password] FROM app_user;
go

OPEN SYMMETRIC KEY AppUserPass_SM DECRYPTION BY CERTIFICATE AppUserPass;
go

SELECT user_id,
       user_name,
       user_type,
       CONVERT(VARCHAR, Decryptbykey([encrypted_password])) AS
       decrypted_password
FROM   app_user; 

GO

--********************************************************************************************************--

-- NonClustered Index1: Create a nonclustered index on the "user_type" column in the "app_user" table
CREATE NONCLUSTERED INDEX usertype_idx
  ON app_user ([user_type]);

-- NonClustered Index2: Create a nonclustered index on the "landlord_type" column in the "landlords" table
CREATE NONCLUSTERED INDEX landlordtype_idx
  ON landlords(landlord_type);

-- NonClustered Index3: Create a nonclustered index on the "state" column in the "landlords" table
CREATE NONCLUSTERED INDEX landlordsstate_idx
  ON landlords([state]);

-- NonClustered Index4: Create a nonclustered index on the "name" column in the "customers" table
CREATE NONCLUSTERED INDEX customername_idx
  ON customers([name]);

-- NonClustered Index5: Create a nonclustered index on the "property_type" column in the "property_details" table
CREATE NONCLUSTERED INDEX propertytype_idx
  ON property_details ([property_type]);


-- Query to check indexes created ON Table : 'app_user'
SELECT NAME      AS index_name,
       type_desc AS index_type
FROM   sys.indexes
WHERE  object_id = Object_id('app_user');
go

-- Query to check indexes created ON Table : 'landlords'
SELECT NAME      AS index_name,
       type_desc AS index_type
FROM   sys.indexes
WHERE  object_id = Object_id('landlords');
go

-- Query to check indexes created ON Table : 'customers'
SELECT NAME      AS index_name,
       type_desc AS index_type
FROM   sys.indexes
WHERE  object_id = Object_id('customers');
go

-- Query to check indexes created ON Table : 'property_details'
SELECT NAME      AS index_name,
       type_desc AS index_type
FROM   sys.indexes
WHERE  object_id = Object_id('property_details'); 

--********************************************************************************************************--
